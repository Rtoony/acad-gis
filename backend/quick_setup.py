"""
ACAD=GIS Quick Setup - Get Connected in 5 Minutes
=================================================

This script will help you:
1. Find your Supabase connection details
2. Test your database connection
3. Configure your .env file correctly
4. Verify everything works

Run this AFTER you reset your Supabase password.
"""

import os
import sys

print("=" * 70)
print("ACAD=GIS Quick Setup")
print("=" * 70)
print()

# Step 1: Get connection details from user
print("STEP 1: Get Your Supabase Connection Details")
print("-" * 70)
print()
print("Go to: https://supabase.com/dashboard/project/dkvyhbqmeumanhnhxmxf")
print("Click: Project Settings → Database → Connection String")
print("Select: URI (Session Pooler)")
print()

print("You should see something like:")
print("postgresql://postgres.dkvyhbqmeumanhnhxmxf:[YOUR-PASSWORD]@aws-1-us-east-2.pooler.supabase.com:5432/postgres")
print()

# Get details from user
print("Please enter the following details:")
print()

db_host = input("DB_HOST (e.g., aws-1-us-east-2.pooler.supabase.com): ").strip()
if not db_host:
    db_host = "aws-1-us-east-2.pooler.supabase.com"
    print(f"  → Using default: {db_host}")

db_port = input("DB_PORT (press Enter for 5432): ").strip()
if not db_port:
    db_port = "5432"
    print(f"  → Using default: {db_port}")

db_name = input("DB_NAME (press Enter for postgres): ").strip()
if not db_name:
    db_name = "postgres"
    print(f"  → Using default: {db_name}")

db_user = input("DB_USER (e.g., postgres.dkvyhbqmeumanhnhxmxf): ").strip()
if not db_user:
    db_user = "postgres.dkvyhbqmeumanhnhxmxf"
    print(f"  → Using default: {db_user}")

db_password = input("DB_PASSWORD (your NEW Supabase password): ").strip()

if not db_password:
    print()
    print("❌ ERROR: Password is required!")
    print("   Please reset your password in Supabase first.")
    sys.exit(1)

print()
print("=" * 70)
print("STEP 2: Testing Connection")
print("-" * 70)
print()

# Try to import psycopg2
try:
    import psycopg2
except ImportError:
    print("❌ psycopg2 not installed!")
    print()
    print("Please run:")
    print("  pip install psycopg2-binary")
    print()
    sys.exit(1)

# Test connection
print("Attempting to connect...")
try:
    conn = psycopg2.connect(
        host=db_host,
        port=db_port,
        database=db_name,
        user=db_user,
        password=db_password,
        connect_timeout=10,
        sslmode='prefer'
    )
    
    print("✅ CONNECTION SUCCESSFUL!")
    print()
    
    # Test query
    cur = conn.cursor()
    cur.execute("SELECT version();")
    version = cur.fetchone()[0]
    print(f"✅ PostgreSQL version: {version[:50]}...")
    print()
    
    # Count tables
    cur.execute("""
        SELECT COUNT(*) 
        FROM information_schema.tables 
        WHERE table_schema = 'public'
    """)
    table_count = cur.fetchone()[0]
    print(f"✅ Found {table_count} tables in database")
    print()
    
    cur.close()
    conn.close()
    
except Exception as e:
    print(f"❌ CONNECTION FAILED!")
    print(f"   Error: {str(e)}")
    print()
    print("Common issues:")
    print("  1. Wrong password - did you reset it in Supabase?")
    print("  2. Wrong host - should be aws-1-us-east-2.pooler.supabase.com")
    print("  3. Wrong user - should include 'postgres.' prefix")
    print()
    sys.exit(1)

# Step 3: Create .env file
print("=" * 70)
print("STEP 3: Creating .env File")
print("-" * 70)
print()

env_content = f"""# ACAD=GIS Database Configuration
# Generated by quick_setup.py on {__import__('datetime').datetime.now()}

DB_HOST={db_host}
DB_PORT={db_port}
DB_NAME={db_name}
DB_USER={db_user}
DB_PASSWORD={db_password}

# Full connection string (for reference)
DATABASE_URL=postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}

# Flask settings
FLASK_ENV=development
FLASK_DEBUG=1
"""

env_path = ".env"
with open(env_path, 'w') as f:
    f.write(env_content)

print(f"✅ Created {env_path}")
print()

# Step 4: Test with python-dotenv
print("=" * 70)
print("STEP 4: Testing .env File")
print("-" * 70)
print()

try:
    from dotenv import load_dotenv
except ImportError:
    print("⚠️  python-dotenv not installed (optional)")
    print("   Install with: pip install python-dotenv")
    print()
    load_dotenv = None

if load_dotenv:
    load_dotenv()
    
    # Verify env vars loaded
    test_host = os.getenv('DB_HOST')
    if test_host == db_host:
        print("✅ Environment variables loaded correctly")
        print()
    else:
        print("⚠️  Environment variables may not be loading")
        print()

# Step 5: Summary
print("=" * 70)
print("SETUP COMPLETE!")
print("=" * 70)
print()
print("Your .env file has been created with these settings:")
print(f"  Host:     {db_host}")
print(f"  Port:     {db_port}")
print(f"  Database: {db_name}")
print(f"  User:     {db_user}")
print(f"  Password: {'*' * len(db_password)}")
print()

print("Next steps:")
print("  1. Copy .env to your backend folder:")
print(f"     copy .env H:\\acad-gis\\backend\\.env")
print()
print("  2. Start your API server:")
print("     cd H:\\acad-gis\\backend")
print("     python api_server_ENHANCED.py")
print()
print("  3. Refresh your Tool Launcher in the browser")
print()

print("If the API server shows errors, run this again with your new password.")
print()
